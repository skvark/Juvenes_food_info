{"tagline":"Offers food info from Tampere region Juvenes restaurants in JSON.","body":"# Juvenes food info in JSON\r\n\r\nThis project's main goal is to offer an easy way to get food data from (Juvenes) restaurants located in different campuses around Tampere.\r\n\r\nYeah, I built this API on top of an existing API hosted by [Juvenes](http://www.juvenes.fi/DesktopModules/Talents.LunchMenu/LunchMenuServices.asmx). Why? Because that API is just... too messy, incoherent, unreadable and very poorly documented.\r\n\r\nIt took many painful hours to dig all the necessary id's for the restaurants and cafes from Juvenes website source code. Note some things:\r\n\r\n* If it's week 52, the Juvenes API won't print next years week 1 foods (don't know if the problem lies in the API itself or in people updating it)\r\n* The openinfoid's in the Juvenes API must be placed in kitcheninfoid-method.. don't ask why.\r\n* Juvenes website tries to fetch week 53 when one presses next week and it's week 52 , but obviously that doesn't work :)\r\n\r\nThis API will be hosted by on my server, I'll publish it later. Probably just serves the static files by lang-parameter and campus-parameter. \r\n\r\nI'm currently building an HTML5 web application on top of this. \r\n\r\n## Changelog\r\n\r\n* 27.12.2012 Added preliminary support for TAY, TAMK and TAKK campuses\r\n* 28.12.2012 Fixed week 52 -> 53 problems, modified logging, added fatal_error flag and put error-flag for every week, added very early support for TAY, TAMK and TAKK, changed file naming\r\n* 29.12.2012  Major refactoring, renamed class, sliced to smaller methods, enhanced error handling, optimized speed and removed unnecessary looping, added new folders and fixed several bugs\r\n\r\n## Usage\r\n\r\nScript creates by default ***ruoka_[campus_name].json*** or ***food_[campus_name].json*** file, depending on language.\r\n\r\nExamples can be found from the repository.\r\n\r\nTo run:\r\n`python json_food_TUT.py <language>`\r\n\r\nLanguage: fi or en, defaults to fi if no parameter given\r\n\r\nI recommend to use cron for scheluded runs.\r\n\r\n## Documentation\r\n\r\nTimestamp is in following format (unix timestamp, integer) and tells the time when file was updated:\r\n* `\"update_timestamp\": 1349082412.619589`\r\n \r\nThe error flag (string) in every week is probably never ok, because some restaurant is always closed and in that case Juvenes API returns internal server error -headers:\r\n* `\"error\": \"False\"` everything ok, `\"error\": \"Some message...\"`\r\n  \r\nOn every day there's date in following format (string):\r\n* `\"date\": \"24.9.2012\"`\r\n\r\nIn case of misconfiguration or some other fatal error the class returns only `update_timestamp` and `fatal_error` (string, False or True):\r\n* `\"fatal_error\": \"False\"`\r\n\r\nMore to come.\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Olli-Pekka Heinisuo\r\n\r\nSince the code is open source, feel free to contribute or use it for your own purposes as long as licence conditions are met.\r\n\r\nDistributed under the [Apache-2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html)","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Juvenes food data","google":""}